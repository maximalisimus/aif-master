#!/usr/bin/env bash

SETCOLOR_SUCCESS="echo -en \\033[1;32m"
SETCOLOR_FAILURE="echo -en \\033[1;31m"
SETCOLOR_ERROR="echo -en \\033[1;33m"
SETCOLOR_NORMAL="echo -en \\033[0;39m"
#
ARCHI=$(uname -m)
SYSTEM=$(uname -o)
VERSION=$(uname -r)
ANSWER="$HOME/.answer"
DIALOG="NULL"
#
pid_count=0
sxhkd_config="$HOME/.config/sxhkd/sxhkdrc"
sxhkd_txt_config="$HOME/.config/sxhkd/sxhkd_conf.conf"
text_editor="NULL"
run_config="NULL"
sxhkd_tmp=$(dirname "${sxhkd_config}")
sxhkd_dir="${sxhkd_tmp[*]}"
unset sxhkd_tmp
sxhkd_run=""
kill_run=""
pidof_run=""
function complete_exit()
{
	rm -rf "$ANSWER"
	$SETCOLOR_NORMAL
	unset SETCOLOR_SUCCESS
	unset SETCOLOR_FAILURE
	unset SETCOLOR_ERROR
	unset SETCOLOR_NORMAL
	
	unset ARCHI
	unset SYSTEM
	unset VERSION
	unset ANSWER
	unset DIALOG
	unset pid_count
	
	unset sxhkd_config
	unset sxhkd_txt_config
	unset text_editor
	unset run_config
	unset sxhkd_dir
	exit "$1"
}
sms()
{
	case "$1" in
		1) $SETCOLOR_SUCCESS
			echo -e -n "Process to Complete"
			$SETCOLOR_NORMAL;; 
		2) $SETCOLOR_FAILURE
			echo -e -n "Process to Failure"
			$SETCOLOR_NORMAL;;
	esac
}
checkprocess()
{
	if [ $1 -eq 0 ]; then
		$SETCOLOR_SUCCESS
		# echo -e -n "\n"
		echo -e -n "$(tput hpa $(tput cols))$(tput cub 6)[OK]"
		$SETCOLOR_NORMAL
		 echo -e -n "\n"
	else
		$SETCOLOR_FAILURE
		# echo -e -n "\n"
		echo -e -n "$(tput hpa $(tput cols))$(tput cub 6)[Fail]"
		$SETCOLOR_NORMAL
		 echo -e -n "\n"
	fi
}
_help()
{
	clear
	echo -e -n "${0} USAGE: [ -start | -stop | -reload | -show-pid "
	echo -e -n "| -create-config | -edit-config "
	echo -e -n "| -set-editor text-editor "
	echo -e -n "| -set-mode "
	echo -e -n "| -set-kill kill"
	echo -e -n "| -set-pidof pidof"
	echo -e -n "| -set-sxhkd sxhkd"
	echo -e -n "| -reset-sxhkd | -reset-config "
	echo -e -n "| -h|--h|--help ]"
	echo -e -n "\n\nThe parameter is:"
	echo -e -n "\n\t-start\t\tStart sxhkd-service."
	echo -e -n "\n\t-stop\t\tStop sxhkd-service."
	echo -e -n "\n\t-reload\t\tReload configuration SXHKD."
	echo -e -n "\n\t-show-pid\tShow the PID sxhkd-services."
	echo -e -n "\n\n\t-create-config\tCreate empty SXHKD config (sxhkdrc)."
	echo -e -n "\n\t-edit-config\tEdit config on default text editor."
	echo -e -n "\n\t-set-editor\tSet default text editor."
	echo -e -n "\n\t-set-kill\tSet the full path of the kill utility."
	echo -e -n "\n\t-set-pidof\tSet the full path of the pidof utility."
	echo -e -n "\n\t-set-sxhkd\tSet the full path of sxhkd."
	echo -e -n "\n\n\t-reset-sxhkd\tResetting the sxhkdrc settings."
	echo -e -n "\n\t-reset-config\tResetting the sxhkd-service settings."
	echo -e -n "\n\n\t-h\t\tHelp."
	echo -e -n "\n\t--h\t\tHelp."
	echo -e -n "\n\t--help\t\tHelp.\n"
}
function start_sxhkd()
{
	pid_int=$("$pidof_run" sxhkd | xargs)
	wait
	pid_count="${pid_int[*]}"
	unset pid_int
	if [[ "$pid_count" != "" ]]; then
		$SETCOLOR_ERROR
		echo "SXHKD is not started. The PID: ${pid_count}"
		$SETCOLOR_NORMAL
		sms "2"
		checkprocess "1"
		complete_exit "1"
	else
		exec "$sxhkd_run" &
		pid_count=$("$pidof_run" sxhkd | xargs)
		echo "SXHKD is started. The PID: ${pid_count[*]}"
		sms "1"
		checkprocess "0"
		complete_exit "0"
	fi
}
function stop_sxhkd()
{
	pid_int=$("$pidof_run" sxhkd | xargs)
	wait
	pid_count="${pid_int[*]}"
	unset pid_int
	if [[ "$pid_count" != "" ]]; then
		"$kill_run" -SIGTERM "$pid_count"
		wait
		$SETCOLOR_SUCCESS
		echo "SXHKD the service is stoped."
		$SETCOLOR_NORMAL
		sms "1"
		checkprocess "0"
		complete_exit "0"
	else
		$SETCOLOR_ERROR
		echo "SXHKD is not the stoped! The PID is not found and sxhkd service is not started!"
		echo "Please, the start sxhkd service!"
		$SETCOLOR_NORMAL
		sms "2"
		checkprocess "1"
		complete_exit "2"
	fi
}
function reload_sxhkd()
{
	pid_int=$("$pidof_run" sxhkd | xargs)
	wait
	pid_count="${pid_int[*]}"
	unset pid_int
	if [[ "$pid_count" != "" ]]; then
		"$kill_run" -SIGUSR1 "$pid_count"
		wait
		$SETCOLOR_SUCCESS
		echo "SXHKD the service is rebooted."
		echo "PID ${pid_count}"
		$SETCOLOR_NORMAL
		sms "1"
		checkprocess "0"
		complete_exit "0"
	else
		$SETCOLOR_ERROR
		echo "SXHKD is not reload! The PID process is not found and sxhkd service is not started!"
		echo "Please, the start sxhkd-service!"
		$SETCOLOR_NORMAL
		sms "2"
		checkprocess "1"
		complete_exit "3"
	fi
}
function show_pid()
{
	pid_int=$("$pidof_run" sxhkd | xargs)
	wait
	pid_count="${pid_int[*]}"
	unset pid_int
	if [[ "$pid_count" != "" ]]; then
		$SETCOLOR_SUCCESS
		echo "SXHKD PID: ${pid_count}"
		$SETCOLOR_NORMAL
		sms "1"
		checkprocess "0"
		complete_exit "0"
	else
		$SETCOLOR_ERROR
		echo "SXHKD is not started! The PID is not found!"
		echo "Please, the start sxhkd service!"
		$SETCOLOR_NORMAL
		sms "2"
		checkprocess "1"
		complete_exit "4"
	fi
}
function create_config()
{
	if [[ -e "$sxhkd_config" ]]; then
		$SETCOLOR_SUCCESS
		echo "SXHKD config detected."
		$SETCOLOR_NORMAL
		sms "1"
		checkprocess "0"
		sxhkd_conf_tmp=$(cat "$sxhkd_config")
		if [[ "${sxhkd_conf_tmp[*]}" != "" ]]; then
			$SETCOLOR_SUCCESS
			echo "sxhkdrc has hotkey entries."
			$SETCOLOR_NORMAL
			sms "1"
			checkprocess "0"
			unset sxhkd_conf_tmp
			wait
			complete_exit "0"
		else
			$SETCOLOR_ERROR
			echo "The contents of the sxhkdrc config are empty."
			$SETCOLOR_NORMAL
			sms "2"
			checkprocess "1"
			unset sxhkd_conf_tmp
			wait
			complete_exit "0"
		fi
	else
		mkdir -p "$sxhkd_dir"
		touch "$sxhkd_config"
		sms "1"
		checkprocess "0"
		wait
		complete_exit "0"
	fi
}
function get_service_config()
{
	if [[ -e "$sxhkd_txt_config" ]]; then
		txt_tmp=$(cat "$sxhkd_txt_config" | sed -n "1p" | sed '/editor=/s/editor=//g' | xargs)
		text_editor="${txt_tmp[*]}"
		unset txt_tmp
		wait
		run_tmp=$(cat "$sxhkd_txt_config" | sed -n "2p" | sed '/config_run=/s/config_run=//g' | xargs)
		run_config="${run_tmp[*]}"
		unset run_tmp
		kill_tmp=$(cat "$sxhkd_txt_config" | sed -n "3p" | sed '/kill_run=/s/kill_run=//g' | xargs)
		pidof_tmp=$(cat "$sxhkd_txt_config" | sed -n "4p" | sed '/pidof_run=/s/pidof_run=//g' | xargs)
		kill_run="${kill_tmp[*]}"
		pidof_run="${pidof_tmp[*]}"
		unset pidof_tmp
		unset kill_tmp
		sxhkd_tmp=$(cat "$sxhkd_txt_config" | sed -n "5p" | sed '/sxhkd_run=/s/sxhkd_run=//g' | xargs)
		sxhkd_run="${sxhkd_tmp[*]}"
		unset sxhkd_tmp
	else
		echo "editor=empty" > "$sxhkd_txt_config"
		wait
		echo "config_run=cli" >> "$sxhkd_txt_config"
		wait
		echo "kill_run=kill" >> "$sxhkd_txt_config"
		wait
		echo "pidof_run=pidof" >> "$sxhkd_txt_config"
		wait
		echo "sxhkd_run=/usr/bin/sxhkd" >> "$sxhkd_txt_config"
		wait
		txt_tmp=$(cat "$sxhkd_txt_config" | sed -n "1p" | sed '/editor=/s/editor=//g' | xargs)
		text_editor="${txt_tmp[*]}"
		unset txt_tmp
		wait
		run_tmp=$(cat "$sxhkd_txt_config" | sed -n "2p" | sed '/config_run=/s/config_run=//g' | xargs)
		run_config="${run_tmp[*]}"
		unset run_tmp
		kill_tmp=$(cat "$sxhkd_txt_config" | sed -n "3p" | sed '/kill_run=/s/kill_run=//g' | xargs)
		pidof_tmp=$(cat "$sxhkd_txt_config" | sed -n "4p" | sed '/pidof_run=/s/pidof_run=//g' | xargs)
		kill_run="${kill_tmp[*]}"
		pidof_run="${pidof_tmp[*]}"
		unset pidof_tmp
		unset kill_tmp
		sxhkd_tmp=$(cat "$sxhkd_txt_config" | sed -n "5p" | sed '/sxhkd_run=/s/sxhkd_run=//g' | xargs)
		sxhkd_run="${sxhkd_tmp[*]}"
		unset sxhkd_tmp
	fi
	if [[ "$run_config" == "cli" ]]; then
		DIALOG=dialog
	else
		DIALOG=Xdialog
	fi
}
function edit_config()
{
	get_service_config
	if [[ "$text_editor" == "empty" ]]; then
		exec xdg-open "$sxhkd_config" &
		sms "1"
		checkprocess "0"
		complete_exit "0"
	else
		"$text_editor" "$sxhkd_config" &
		wait
		sms "1"
		checkprocess "0"
		complete_exit "0"
	fi
}
function set_editor()
{
	get_service_config
	$DIALOG --backtitle "$SYSTEM $VERSION ($ARCHI)" --title "Input default text-editor." --inputbox "Please, input name the text editor." 0 0 "$text_editor" 2>${ANSWER}
	clear
	wait
	editor_data=$(cat ${ANSWER})
	wait
	text_editor="${editor_data[*]}"
	wait
	unset editor_data
	wait
	sed -i "/editor/c editor=$text_editor" "$sxhkd_txt_config"
	wait
	rm -rf "$ANSWER"
	sms "1"
	checkprocess "0"
	wait
	complete_exit "0"
}
function set_kill()
{
	get_service_config
	$DIALOG --backtitle "$SYSTEM $VERSION ($ARCHI)" --title "Entering the full path." --inputbox "Please enter the full path to the kill utility." 0 0 "$kill_run" 2>${ANSWER}
	clear
	wait
	kill_data=$(cat ${ANSWER})
	kill_run="${kill_data[*]}"
	unset kill_data
	sed -i "/kill_run/c kill_run=$kill_run" "$sxhkd_txt_config"
	wait
	rm -rf "$ANSWER"
	sms "1"
	checkprocess "0"
	wait
	complete_exit "0"
}
function set_pidof()
{
	get_service_config
	$DIALOG --backtitle "$SYSTEM $VERSION ($ARCHI)" --title "Entering the full path." --inputbox "Please enter the full path to the pidof utility." 0 0 "$pidof_run" 2>${ANSWER}
	clear
	wait
	pidof_data=$(cat ${ANSWER})
	pidof_run="${pidof_data[*]}"
	unset pidof_data
	sed -i "/pidof_run/c pidof_run=$pidof_run" "$sxhkd_txt_config"
	wait
	rm -rf "$ANSWER"
	sms "1"
	checkprocess "0"
	wait
	complete_exit "0"
}
function set_sxhkd()
{
	get_service_config
	$DIALOG --backtitle "$SYSTEM $VERSION ($ARCHI)" --title "Entering the full path." --inputbox "Please enter the full path to the sxhkd itself." 0 0 "$sxhkd_run" 2>${ANSWER}
	clear
	wait
	sxhkd_data=$(cat ${ANSWER})
	sxhkd_run="${sxhkd_data[*]}"
	unset sxhkd_data
	sed -i "/sxhkd_run/c sxhkd_run=$sxhkd_run" "$sxhkd_txt_config"
	wait
	rm -rf "$ANSWER"
	sms "1"
	checkprocess "0"
	wait
	complete_exit "0"
}
function reset_sxhkd()
{
	echo "" > "$sxhkd_config"
}
function reset_config()
{
	echo "editor=empty" > "$sxhkd_txt_config"
	wait
	echo "config_run=cli" >> "$sxhkd_txt_config"
	wait
	echo "kill_run=kill" >> "$sxhkd_txt_config"
	wait
	echo "pidof_run=pidof" >> "$sxhkd_txt_config"
	wait
	echo "sxhkd_run=/usr/bin/sxhkd" >> "$sxhkd_txt_config"
	wait	
	sms "1"
	checkprocess "0"
	wait
	complete_exit "0"
}
if [[ -z "$1" ]]; then
	$SETCOLOR_FAILURE
	echo -e -n "You have not entered the option. "
	$SETCOLOR_ERROR
	echo -e -n "Please enter one of the suggested parameters.\n"
	$SETCOLOR_NORMAL
	_help
	complete_exit "0"
fi
while [ -n "$1" ]; do
	case "$1" in
		-start) start_sxhkd
			;;
		-stop) stop_sxhkd
			;;
		-reload) reload_sxhkd
			;;
		-show-pid) show_pid
			;;
		-create-config) create_config
			;;
		-edit-config) edit_config
			;;
		-set-editor) set_editor
			;;
		-set-kill) set_kill
			;;
		-set-pidof) set_pidof
			;;
		-set-sxhkd) set_sxhkd
			;;
		-reset-sxhkd) reset_sxhkd
			;;
		-reset-config) reset_config
			;;
		-[h?] | --help) _help;;
		*) $SETCOLOR_FAILURE
			echo -e -n "Invalid option. "
			$SETCOLOR_ERROR
			echo -e -n "Please enter the correct one.\n"
			$SETCOLOR_NORMAL
			_help
			;;
	esac
	shift
done
complete_exit "0"
